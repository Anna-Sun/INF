p2 <- snpStats::p.value(single.snp.tests(phenotype=Y2, snp.data=X2),df=1)
maf <- col.summary(X2)[,"MAF"]
get.beta <- function(...) {
tmp <- snpStats::snp.rhs.estimates(..., family="gaussian")
beta <- sapply(tmp,"[[","beta")
varbeta <- sapply(tmp, "[[", "Var.beta")
return(list(beta=beta,varbeta=varbeta))
}
b1 <- get.beta(Y1 ~ 1, snp.data=X1)
b2 <- get.beta(Y2 ~ 1, snp.data=X2)
} else {
Y1 <- data@df1$Y
Y2 <- data@df2$Y
X1 <- as.matrix(data@df1[,-1])
X2 <- as.matrix(data@df2[,-1])
tests1 <- lapply(1:ncol(X1), function(i) summary(lm(Y1 ~ X1[,i]))$coefficients[2,])
tests2 <- lapply(1:ncol(X2), function(i) summary(lm(Y2 ~ X2[,i]))$coefficients[2,])
p1 <- sapply(tests1,"[",4)
p2 <- sapply(tests2,"[",4)
maf <- colMeans(X2)/2
get.beta <- function(x) {
beta <- sapply(x,"[",1)
varbeta <- sapply(x, "[", 2)^2
return(list(beta=beta,varbeta=varbeta))
}
b1 <- get.beta(tests1)
b2 <- get.beta(tests2)
}
install.packages("survival")
q()
# coloc, large (>0.05) p.value.chisquare indicates traits are compatible with colocalisation
# https://cran.r-project.org/web/packages/coloc/vignettes/vignette.html
set.seed(1)
X1 <- matrix(rbinom(1200,1,0.4),ncol=2)
X2 <- matrix(rbinom(1000,1,0.6),ncol=2)
colnames(X1) <- colnames(X2) <- c("f1","f2")
Y1 <- rnorm(600,apply(X1,1,sum),2)
Y2 <- rnorm(500,2*apply(X2,1,sum),5)
summary(lm1 <- lm(Y1~f1+f2,data=as.data.frame(X1)))
summary(lm2 <- lm(Y2~f1+f2,data=as.data.frame(X2)))
require(coloc)
## intuitive test for proportionality
ct <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")))
summary(ct)
b1 <- coef(lm1)
b2 <- coef(lm2)
v1 <- vcov(lm1)
v2 <- vcov(lm2)
coloc.test.summary(b1,b2,v1,v2)
# some Bayesian flavour
ct.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),bayes=TRUE)
ci(ct.bayes)
par(mfrow=c(2,2))
plot(ct)
plot(ct.bayes)
cc.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),
bayes=TRUE, bayes.factor=list(c(-0.1,1), c(0.9,1.1)))
ci(cc.bayes)
## Bayesian approach, esp. when only p values are available
abf <- coloc.abf(dataset1=list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
dataset2=list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant"))
abf
`
ci(cc.bayes)
## Bayesian approach, esp. when only p values are available
coloc.bma(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant"))
s
)
''
@
library(coloc)
args(coloc.abf)
set.seed(1)
X1 <- matrix(rbinom(1200,1,0.4),ncol=2)
X2 <- matrix(rbinom(1000,1,0.6),ncol=2)
colnames(X1) <- colnames(X2) <- c("f1","f2")
Y1 <- rnorm(600,apply(X1,1,sum),2)
Y2 <- rnorm(500,2*apply(X2,1,sum),5)
summary(lm1 <- lm(Y1~f1+f2,data=as.data.frame(X1)))
summary(lm2 <- lm(Y2~f1+f2,data=as.data.frame(X2)))
require(coloc)
## intuitive test for proportionality
ct <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")))
summary(ct)
b1 <- coef(lm1)
b2 <- coef(lm2)
v1 <- vcov(lm1)
v2 <- vcov(lm2)
coloc.test.summary(b1,b2,v1,v2)
# some Bayesian flavour
ct.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),bayes=TRUE)
ci(ct.bayes)
par(mfrow=c(2,2))
plot(ct)
plot(ct.bayes)
cc.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),
bayes=TRUE, bayes.factor=list(c(-0.1,1), c(0.9,1.1)))
ci(cc.bayes)
## Bayesian approach, esp. when only p values are available
abf <- coloc.abf(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant"))
abf
bma <- coloc.bma(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant"))
# coloc, large (>0.05) p.value.chisquare indicates traits are compatible with colocalisation
# https://cran.r-project.org/web/packages/coloc/vignettes/vignette.html
set.seed(1)
X1 <- matrix(rbinom(1200,1,0.4),ncol=2)
X2 <- matrix(rbinom(1000,1,0.6),ncol=2)
colnames(X1) <- colnames(X2) <- c("f1","f2")
Y1 <- rnorm(600,apply(X1,1,sum),2)
Y2 <- rnorm(500,2*apply(X2,1,sum),5)
summary(lm1 <- lm(Y1~f1+f2,data=as.data.frame(X1)))
summary(lm2 <- lm(Y2~f1+f2,data=as.data.frame(X2)))
require(coloc)
## intuitive test for proportionality
ct <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")))
summary(ct)
b1 <- coef(lm1)
b2 <- coef(lm2)
v1 <- vcov(lm1)
v2 <- vcov(lm2)
coloc.test.summary(b1,b2,v1,v2)
# some Bayesian flavour
ct.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),bayes=TRUE)
ci(ct.bayes)
par(mfrow=c(2,2))
plot(ct)
plot(ct.bayes)
cc.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),
bayes=TRUE, bayes.factor=list(c(-0.1,1), c(0.9,1.1)))
ci(cc.bayes)
## Bayesian approach, esp. when only p values are available
abf <- coloc.abf(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant"))
abf
coloc.bma(# coloc, large (>0.05) p.value.chisquare indicates traits are compatible with colocalisation
# https://cran.r-project.org/web/packages/coloc/vignettes/vignette.html
set.seed(1)
X1 <- matrix(rbinom(1200,1,0.4),ncol=2)
X2 <- matrix(rbinom(1000,1,0.6),ncol=2)
colnames(X1) <- colnames(X2) <- c("f1","f2")
Y1 <- rnorm(600,apply(X1,1,sum),2)
Y2 <- rnorm(500,2*apply(X2,1,sum),5)
summary(lm1 <- lm(Y1~f1+f2,data=as.data.frame(X1)))
summary(lm2 <- lm(Y2~f1+f2,data=as.data.frame(X2)))
require(coloc)
## intuitive test for proportionality
ct <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")))
summary(ct)
b1 <- coef(lm1)
b2 <- coef(lm2)
v1 <- vcov(lm1)
v2 <- vcov(lm2)
coloc.test.summary(b1,b2,v1,v2)
# some Bayesian flavour
ct.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),bayes=TRUE)
ci(ct.bayes)
par(mfrow=c(2,2))
plot(ct)
plot(ct.bayes)
cc.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),
bayes=TRUE, bayes.factor=list(c(-0.1,1), c(0.9,1.1)))
ci(cc.bayes)
## Bayesian approach, esp. when only p values are available
abf <- coloc.abf(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant"))
)
coloc.bma(# coloc, large (>0.05) p.value.chisquare indicates traits are compatible with colocalisation
# https://cran.r-project.org/web/packages/coloc/vignettes/vignette.html
set.seed(1)
X1 <- matrix(rbinom(1200,1,0.4),ncol=2)
X2 <- matrix(rbinom(1000,1,0.6),ncol=2)
colnames(X1) <- colnames(X2) <- c("f1","f2")
Y1 <- rnorm(600,apply(X1,1,sum),2)
Y2 <- rnorm(500,2*apply(X2,1,sum),5)
summary(lm1 <- lm(Y1~f1+f2,data=as.data.frame(X1)))
summary(lm2 <- lm(Y2~f1+f2,data=as.data.frame(X2)))
require(coloc)
## intuitive test for proportionality
ct <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")))
summary(ct)
b1 <- coef(lm1)
b2 <- coef(lm2)
v1 <- vcov(lm1)
v2 <- vcov(lm2)
coloc.test.summary(b1,b2,v1,v2)
# some Bayesian flavour
ct.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),bayes=TRUE)
ci(ct.bayes)
par(mfrow=c(2,2))
plot(ct)
plot(ct.bayes)
cc.bayes <- coloc.test(lm1,lm2, plots.extra=list(x=c("eta","theta"), y=c("lhood","lhood")),
bayes=TRUE, bayes.factor=list(c(-0.1,1), c(0.9,1.1)))
ci(cc.bayes)
## Bayesian approach, esp. when only p values are available
abf <- coloc.abf(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant"))
args(coloc.bma)
coloc.bm(coloc.abf(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant")),snps=c("f1","f2"))
coloc.bma(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant")),snps=c("f1","f2")
coloc.bma(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant")),snps=c("f1","f2"))
coloc.bma(list(beta=b1, varbeta=diag(v1), N=nrow(X1), sdY=sd(Y1), type="quant"),
list(beta=b2, varbeta=diag(v2), N=nrow(X2), sdY=sd(Y2), type="quant"),snps=c("f1","f2"))
q()
library(MendelianRandomization)
extract.pheno.csv
path.noproxy <- system.file("extdata", "vitD_snps_PhenoScanner.csv", package = "MendelianRandomization")
path.proxies <- system.file("extdata", "vitD_snps_PhenoScanner_proxies.csv", package = "MendelianRandomization")
extract.pheno.csv(
exposure = "log(eGFR creatinine)", pmidE = 26831199, ancestryE = "European",
outcome = "Tanner stage", pmidO = 24770850, ancestryO = "European", file = path.noproxy)
extract.pheno.csv(
exposure = "log(eGFR creatinine)", pmidE = 26831199, ancestryE = "European",
outcome = "Tanner stage", pmidO = 24770850, ancestryO = "European", rsq.proxy = 0.6, file = path.proxies)
library(TwoSampleMR)
ao <- available_outcomes()
subset(ao,id%in%c(2,966))
table(ao$trait)
fix(ao)
order(ao$id)
ao[order(ao$id),]
oao <-ao[order(ao$id),]
fix(oao)
oao <-ao[order(ao$author),]
fix(oao)
getwd()
q()
setwd("u:/INF/doc")
# 3-9-2018 JHZ
proteins <- read.delim("proteins")
dim(proteins)
head(proteins, 4)
# 3-9-2018 JHZ
proteins <- read.delim("proteins")
dim(proteins)
head(proteins, 4)
# 3-9-2018 JHZ
d <- read.delim("proteins")
proteins <- d[c("Olink_name", "gene", "Uniprot")]
dim(proteins)
head(proteins, 4)
str(d)
# 3-9-2018 JHZ
d <- read.delim("proteins", as.is=TRUE)
proteins <- d[c("Olink_name", "gene", "Uniprot")]
dim(proteins)
head(proteins, 4)
str(d)
str(proteins)
# 24-8-2018 JHZ
options(width=160)
olink_panel <- function(xlsx, tabs, order, nlines, verbose)
{
for (x in tabs)
{
if (verbose) cat("\n\n", x, ":\n", rep("-", nchar(x)+1), "\n\n", sep="")
t <- openxlsx::read.xlsx(xlsx, sheet=x, colNames=TRUE, skipEmptyRows=FALSE, cols=c(1:16), rows=3:95)
s <- sub(" ", "_", x)
if (!order) assign(s, t, envir=.GlobalEnv) else
{
o <- order(t[,2])
assign(s, t[o,], envir=.GlobalEnv)
}
s <- get(s)
t <- "Target"
n <- names(s)
if (verbose)
{
print(head(s["Target"],nlines),right=FALSE)
cat("\n")
print(head(s[setdiff(n,t)],nlines))
}
}
}
xlsx <- "Olink validation data all panels.xlsx"
tabs <- "Inflammation"
olink_panel(xlsx,tabs,FALSE,92,TRUE)
inf.orig <- Inflammation
head(inf.orig)
names(proteins)
names(inf.orig)
merge(proteins, inf.orig, by.x="UniProt",by.y="UniProt.NO.")
merge(proteins, inf.orig, by.x="UniProt",by.y="UniProt.NO.")
merge(proteins, inf.orig, by.x="UniProt",by.y="UniProt.NO.")
merge(proteins, inf.orig, by.x="UniProt",by.y="UniProt.NO.")
dim(inf.orig)
dim(proteins)
names(proteins)
merge(proteins, inf.orig, by.x="Uniprot",by.y="UniProt.NO.")
merge(proteins, inf.orig, by.x="Uniprot",by.y=" UniProt.No.")
head(proteins)
head(inf.orig)
class(proteins)
class(inf.orig)
merge(proteins, inf.orig, by.x="Uniprot",by.y="UniProt.NO.")
dim(proc.time())
dim(proteieins
dim(proteieins)
dim(proteieins)
dim(proteins)
dim(inf.orig)
merge(proteins, inf.orig, by.x="Uniprot", by.y="UniProt.NO.")
# grep inf1 olink.prot.list.txt | sed 's/inf1_//g;s/___/\t/g' > inf1.list
inf <- read.table("inf1.list",header=FALSE,col.names=c("prot","UniProt"),sep="\t",as.is=TRUE)
inf1 <- merge(inf,inf.orig,by.x="UniProt",by.y="UniProt.No.")
# See https://www.uniprot.org/uniprot/ for additional information
dim(inf)
head(inf)
dim(inf1)
head(inf1)
# grep inf1 olink.prot.list.txt | sed 's/inf1_//g;s/___/\t/g' > inf1.list
inf <- read.table("inf1.list",header=FALSE,col.names=c("prot","UniProt"),sep="\t",as.is=TRUE)
# See https://www.uniprot.org/uniprot/ for additional information
inf1 <- merge(inf,inf.orig,by.x="UniProt",by.y="UniProt.No.")
inf1 <- merge(inf,inf.orig,by.x="Uniprot",by.y="UniProt.No.")
inf1 <- merge(proteins,inf.orig,by.x="Uniprot",by.y="UniProt.No.")
# from CVD I analysis plan
d <- read.delim("proteins", as.is=TRUE)
proteins <- d[c("Olink_name", "gene", "Uniprot")]
dim(proteins)
head(proteins, 4)
merge(proteins,inf.orig,by.x="Uniprot",by.y="UniProt.No.")
xlsx <- "Olink validation data all panels.xlsx"
tabs <- "Inflammation"
olink_panel(xlsx,tabs,FALSE,92,TRUE)
inf.orig <- Inflammation
tabs <-c("Cardiometabolic","Cell Regulation","CVD II","CVD III","Development","Immune Response","Immuno-Oncology",
"Inflammation","Metabolism","Neurology","Oncology II","Organ Damage")
olink_panel(xlsx,tabs,TRUE,92,FALSE)
ls()
# grep inf1 olink.prot.list.txt | sed 's/inf1_//g;s/___/\t/g' > inf1.list
inf <- read.table("inf1.list",header=FALSE,col.names=c("prot","UniProt"),sep="\t",as.is=TRUE)
inf1 <- merge(inf,inf.orig,by.x="UniProt",by.y="UniProt.No.")
# See https://www.uniprot.org/uniprot/ for additional information
setdiff(inf$UniProt,inf.orig$UniProt.No.)
setdiff(inf.orig$UniProt.No.,inf$UniProt)
# from CVD I analysis plan
cvd1 <- read.delim("cvd1", as.is=TRUE)
cvd1 <- cvd1[c("Olink_name", "gene", "Uniprot")]
inf2 <- merge(cvd1, inf.orig, by.x="Uniprot", by.y="UniProt.No.")
dim(inf1)
dim(inf2)
fix(inf2)
dim(inf2)
dim(inf1)
setdiff(inf.orig$UniProt.No.,inf$UniProt)
inf.orig[inf.orig$UniProt.No.%in%setdiff(inf.orig$UniProt.No.,inf$UniProt),]
cvd1
subset(cvd1,Uniprot=="Q4ACW9")
subset(cvd1,Uniprot=="Q8NFT8")
subset(cvd1,gene=="DNER")
subset(cvd1,Uniprot %in% c("Q8NFT8","Q4ACW9")
)
subset(cvd1,Uniprot %in% c("Q8NFT8","Q4ACW9"))
subset(inf.orig,UniProt.NO. %in% c("Q8NFT8","Q4ACW9"))
subset(inf.orig, UniProt.NO. %in% c("Q8NFT8","Q4ACW9"))
subset(inf, UniProt %in% c("Q8NFT8","Q4ACW9"))
setdiff(inf.orig$UniProt.No.,inf$UniProt)
setdiff(inf.orig$UniProt.No.,inf$UniProt)
subset(inf, UniProt %in% c("Q8NFT8","Q4ACW9"))
subset(inf.orig, UniProt.NO. %in% c("Q8NFT8","Q4ACW9"))
subset(inf.orig, UniProt.NO. %in% c("Q8NFT8","Q4ACW9"))
names(inf.orig)
subset(inf.orig, UniProt.No.%in% c("Q8NFT8","Q4ACW9"))
setdiff(inf.orig$UniProt.No.,inf$UniProt)
setdiff(inf$UniProt, inf.orig$UniProt.No.)
d2 <- setdiff(inf$UniProt, inf.orig$UniProt.No.)
subset(inf.orig, UniProt.No.%in% c("Q8NFT8","Q4ACW9"))
subset(inf.orig, UniProt.No.%in% =f2
subset(inf.orig, UniProt.No.%in% c("Q8NFT8","Q4ACW9"))
subset(inf.orig, UniProt.No. %in% c("Q8NFT8","Q4ACW9"))
subset(inf.orig, UniProt.No. %in% d2
)
subset(inf.orig, UniProt.No. %in% d2)
subset(inf, UniProt.No. %in% d2)
subset(inf, Uniprot %in% d2)
subset(inf, Uniprot %in% d2)
d2
subset(inf, Uniprot %in% d2)
subset(inf, UniProt %in% d2)
d2
# 3-9-2018 JHZ
options(width=160)
olink_panel <- function(xlsx, tabs, order, nlines, verbose)
{
for (x in tabs)
{
if (verbose) cat("\n\n", x, ":\n", rep("-", nchar(x)+1), "\n\n", sep="")
t <- openxlsx::read.xlsx(xlsx, sheet=x, colNames=TRUE, skipEmptyRows=FALSE, cols=c(1:16), rows=3:95)
s <- sub(" ", "_", x)
if (!order) assign(s, t, envir=.GlobalEnv) else
{
o <- order(t[,2])
assign(s, t[o,], envir=.GlobalEnv)
}
s <- get(s)
t <- "Target"
n <- names(s)
if (verbose)
{
print(head(s["Target"],nlines),right=FALSE)
cat("\n")
print(head(s[setdiff(n,t)],nlines))
}
}
}
xlsx <- "Olink validation data all panels.xlsx"
tabs <- "Inflammation"
olink_panel(xlsx,tabs,FALSE,92,TRUE)
inf.orig <- Inflammation
tabs <-c("Cardiometabolic","Cell Regulation","CVD II","CVD III","Development","Immune Response","Immuno-Oncology",
"Inflammation","Metabolism","Neurology","Oncology II","Organ Damage")
olink_panel(xlsx,tabs,TRUE,92,FALSE)
ls()
# grep inf1 olink.prot.list.txt | sed 's/inf1_//g;s/___/\t/g' > inf1.list
inf <- read.table("inf1.list",header=FALSE,col.names=c("prot","UniProt"),sep="\t",as.is=TRUE)
inf1 <- merge(inf,inf.orig,by.x="UniProt",by.y="UniProt.No.")
dim(inf1)
Inflammation
?replace
in(Inflammation, {replace(UniProt.No.,UniProt.NO.=="Q4ACW9","O43508")})
wiin(Inflammation, {replace(UniProt.No.,UniProt.NO.=="Q4ACW9","O43508")})
with(Inflammation, {replace(UniProt.No.,UniProt.NO.=="Q4ACW9","O43508")})
with(Inflammation, {replace(UniProt.No,UniProt.NO.=="Q4ACW9","O43508")})
names(Inflammation)
with(Inflammation, {replace(UniProt.No,UniProt.No.=="Q4ACW9","O43508")})
with(Inflammation, {replace(UniProt.No.,UniProt.No.=="Q4ACW9","O43508")})
within(Inflammation, {replace(UniProt.No.,UniProt.No.=="Q4ACW9","O43508")})
within(Inflammation, {replace(UniProt.No.,UniProt.No.=="Q4ACW9","O43508")})
d <- within(Inflammation, {replace(UniProt.No.,UniProt.No.=="Q4ACW9","O43508")})
d <- with(Inflammation, {replace(UniProt.No.,UniProt.No.=="Q4ACW9","O43508")})
d
xlsx <- "Olink validation data all panels.xlsx"
tabs <- "Inflammation"
olink_panel(xlsx,tabs,FALSE,92,TRUE)
# TWEAK O43508, Q4ACW9
Inflammation["UniProt.No."] <- with(Inflammation, {replace(UniProt.No.,UniProt.No.=="Q4ACW9","O43508")})
inf.orig <- Inflmmation
tabs <-c("Cardiometabolic","Cell Regulation","CVD II","CVD III","Development","Immune Response","Immuno-Oncology",
"Inflammation","Metabolism","Neurology","Oncology II","Organ Damage")
olink_panel(xlsx,tabs,TRUE,92,FALSE)
ls()
# grep inf1 olink.prot.list.txt | sed 's/inf1_//g;s/___/\t/g' > inf1.list
inf <- read.table("inf1.list",header=FALSE,col.names=c("prot","UniProt"),sep="\t",as.is=TRUE)
inf1 <- merge(inf,inf.orig,by.x="UniProt",by.y="UniProt.No.")
# See https://www.uniprot.org/uniprot/ for additional information
setdiff(inf$UniProt,inf.orig$UniProt.No.)
setdiff(inf.orig$UniProt.No.,inf$UniProt)
# from CVD I analysis plan
cvd1 <- read.delim("cvd1", as.is=TRUE)
cvd1 <- cvd1[c("Olink_name", "gene", "Uniprot")]
inf2 <- merge(cvd1, inf.orig, by.x="Uniprot", by.y="UniProt.No.")
"
xlsx <- "Olink validation data all panels.xlsx"
tabs <- "Inflammation"
olink_panel(xlsx,tabs,FALSE,92,TRUE)
# TWEAK O43508, Q4ACW9
Inflammation["UniProt.No."] <- with(Inflammation, {replace(UniProt.No.,UniProt.No.=="Q4ACW9","O43508")})
inf.orig <- Inflammation
tabs <-c("Cardiometabolic","Cell Regulation","CVD II","CVD III","Development","Immune Response","Immuno-Oncology",
"Inflammation","Metabolism","Neurology","Oncology II","Organ Damage")
olink_panel(xlsx,tabs,TRUE,92,FALSE)
ls()
# grep inf1 olink.prot.list.txt | sed 's/inf1_//g;s/___/\t/g' > inf1.list
inf <- read.table("inf1.list",header=FALSE,col.names=c("prot","UniProt"),sep="\t",as.is=TRUE)
inf1 <- merge(inf,inf.orig,by.x="UniProt",by.y="UniProt.No.")
# See https://www.uniprot.org/uniprot/ for additional information
setdiff(inf$UniProt,inf.orig$UniProt.No.)
setdiff(inf.orig$UniProt.No.,inf$UniProt)
# from CVD I analysis plan
cvd1 <- read.delim("cvd1", as.is=TRUE)
cvd1 <- cvd1[c("Olink_name", "gene", "Uniprot")]
inf2 <- merge(cvd1, inf.orig, by.x="Uniprot", by.y="UniProt.No.")
dim(inf1)
inf(inf2)
dim(inf2)
inf1
inf1
inf.orig$UniProt.No.
tabs <-c("Cardiometabolic","Cell Regulation","CVD II","CVD III","Development","Immune Response","Immuno-Oncology",
"Inflammation","Metabolism","Neurology","Oncology II","Organ Damage")
olink_panel(xlsx,tabs,TRUE,92,FALSE)
ls()
Inflammation$UniProt.No.
inf.orig$UniProt.No.
tabs <- "Inflammation"
olink_panel(xlsx,tabs,FALSE,92,TRUE)
Inflammation$UniProt.No.
inf.orig$UniProt.No.
head(inf1)
fix(info.orig)
fix(inf.orig)
fix(inf1)
write.csv(inf1[c("UniProt","prot","Target")],file="inf1.csv",row.names=NULL)
write.csv(inf1[c("UniProt","prot","Target")],file="inf1.csv",row.name=NULL)
args(write.csv)
write.csv(inf1[c("UniProt","prot","Target")],file="inf1.csv",rowname=NULL)
write.csv(inf1[c("UniProt","prot","Target")],file="inf1.csv")
args(write.csv)
?write.csv
qwrite.csv(inf1[c("UniProt","prot","Target")],file="inf1.csv",row.names=FALSE
)
qwrite.csv(inf1[c("UniProt","prot","Target")],file="inf1.csv",row.names=FALSE)
write.csv(inf1[c("UniProt","prot","Target")],file="inf1.csv",row.names=FALSE)
write.csv(inf1[c("UniProt","prot","Target")],file="inf1.csv",row.names=FALSE)
write.csv(inf1[c("UniProt","prot","Target")], file="inf1.csv", quote=FALSE, row.names=FALSE)
