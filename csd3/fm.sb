#!/bin/bash

#SBATCH --account=PETERS-SL3-CPU
#SBATCH --ntasks=1
#SBATCH --job-name=_fm
#SBATCH --time=12:00:00
#SBATCH --partition=skylake
#SBATCH --array=1
#SBATCH --mem=128800
#SBATCH --output=/rds/user/jhz22/hpc-work/work/_fm_%A_%a.out
#SBATCH --error=/rds/user/jhz22/hpc-work/work/_fm_%A_%a.err
#SBATCH --export ALL

export INF=/rds/project/jmmh2/rds-jmmh2-projects/olink_proteomics/scallop/INF
export TMPDIR=/rds/user/jhz22/hpc-work/work
export job=${SLURM_ARRAY_TASK_ID}
export bindir=/rds-d4/user/jhz22/hpc-work/bin
export dir=${INF}/INTERVAL
export list=${dir}/INTERVAL_nold.sentinels
export p=$(awk -v job=${job} 'NR==62{print $1}' ${list})
export chr=$(awk -v job=${job} 'NR==62{print $2}' ${list})
export pos=$(awk -v job=${job} 'NR==62{print $3}' ${list})
export r=$(awk -v job=${job} 'NR==62{print $4}' ${list})
export pr=${p}-${r}
export sumstats=${INF}/sumstats/INTERVAL/INTERVAL.${p}.gz
export flanking=1e6
export start=$(awk -vpos=${pos} -vflanking=${flanking} 'BEGIN{start=pos-flanking;if(start<0) start=0;print start}')
export end=$(awk -vpos=${pos} -vflanking=${flanking} 'BEGIN{print pos+flanking}')
export bfile=${INF}/INTERVAL/INTERVAL
export sample=o5000-inf1-outlier_in-r2.sample
export snpid_rsid=${INF}/work/INTERVAL.rsid
export study=INTERVAL
export N=4994

plink-1.9 --bfile ${bfile} \
          --snp ${r} \
          --window 1000 \
          --maf 0.01 \
          --indep-pairwise 1000kb 1 0.8 \
          --out ${dir}/${pr}

if [ $(grep ${r} ${dir}/${pr}.prune.in | wc -l) -eq 0 ]; then
   (
     echo ${r}
     cat ${dir}/${pr}.prune.in
   ) > $TMPDIR/${pr}
   plink-1.9 --bfile ${bfile} \
             --extract $TMPDIR/${pr} \
             --r2 square \
             --out $TMPDIR/${pr}
   export i=$(paste $TMPDIR/${pr} $TMPDIR/${pr}.ld | cut -f1,2 | sort -r -k2,2g | awk 'NR==1 {print $1}')
   sed -i 's/'"$i"'/'"$r"'/g' ${dir}/${pr}.prune.in
fi

sort -k1,1 ${dir}/${pr}.prune.in > $TMPDIR/${pr}.prune.in
awk 'NR > 1' ${dir}/${p}.ma | \
sort -k1,1 | \
join -j1 - $TMPDIR/${pr}.prune.in | \
awk '{print $1}' > ${dir}/${pr}
sort -k1,1 ${snpid_rsid} | join -a2 - ${pr} > ${pr}.rsid
R --no-save -q <<END
    f <- Sys.getenv("pr")
    snpid_rsid <- read.table(paste0(f,".rsid"), as.is=TRUE, col.names=c("rsid","name"), fill=TRUE)
    nmiss <- with(snpid_rsid,name=="")
    snpid_rsid <- within(snpid_rsid, {name[nmiss] <- make.names(rsid[nmiss])})
    save(snpid_rsid, file=paste0(f,".rda"))
END

function finemap()
{
# z0
  (
    zcat ${sumstats} | \
    awk 'NR > 1' | \
    sort -k1,1 | \
    awk -vchr=${chr} -vstart=${start} -vend=${end} '
    {
      if ($2==chr && $3 >= start && $3 < end) {
      if ($8 < 0.5) maf = $8; else maf = 1-$8
      if (maf > 0 && maf <= 0.5 && $9 != "NA" && $10 != "NA") print $1, $2, $3, $7, $6, maf, $9, $10
    }
    } ' | \
    join ${dir}/${pr} -
  ) > ${pr}.z0
  awk '{print $1} ' ${pr}.z0 > ${pr}.incl
# bgen
  qctool -g ${bfile}.bed -filetype binary_ped -og ${pr}.bgen -ofiletype bgen -incl-rsids ${pr}.incl
# bgi
  bgenix -g ${pr}.bgen -index -clobber
  ln -sf ${pr}.bgen.bgi ${pr}.bgi
  qctool -g ${pr}.bgen -snp-stats -osnp - > ${pr}.snp-stats
  (
    join <(cut -d' ' -f1,4,5 ${pr}.z | sort -k1,1) <(awk '!/\#/' ${pr}.snp-stats | cut -f1,5,6 | awk 'NR>1' | sort -k1,1) | \
    awk '{print $1, ($2!=$4)}'
  ) > ${pr}.flip
# master
  (
    echo "z;bgen;bgi;dose;snp;config;cred;log;n_samples"
    echo "${pr}.z;${pr}.bgen;${pr}.bgi;${pr}.dose;${pr}.snp;${pr}.config;${pr}.cred;${pr}.log;$N"
  ) > ${pr}.master
  (
    awk 'BEGIN {print "rsid", "chromosome", "position", "allele1", "allele2", "maf", "beta", "se", "flip"}'
    join ${pr}.z0 ${pr}.flip | awk '{if($9==1) {t=$4;$4=$5;$5=t};$7=-$7; print}'
  ) > ${pr}.z
# finemap
  rm -rf ${pr}.cred ${pr}.dose ${pr}.snp ${pr}.config
  ${bindir}/finemap --sss --in-files ${pr}.master
  R -q --no-save <<\ \ END
    options(digits=3, scipen=20, width=500)
    pr <- Sys.getenv("pr")
    cat(pr, "\n")
    snp <- read.table(paste0(pr, ".snp"), as.is=TRUE, header=TRUE)
    config <- read.table(paste0(pr,".config"),as.is=TRUE,header=TRUE)
    cred <- read.table(paste0(pr,".cred"),as.is=TRUE,header=TRUE)
    library(openxlsx)
    xlsx <- paste0(pr, "-finemap.xlsx")
    unlink(xlsx, recursive = FALSE, force = TRUE)
    wb <- createWorkbook(xlsx)
    f <- make.names(pr)
    addWorksheet(wb, "snpid_rsid")
    writeDataTable(wb, "snpid_rsid", snpid_rsid)
    addWorksheet(wb, paste0(f, ".snp"))
    writeDataTable(wb, paste0(f, ".snp"), snp)
    addWorksheet(wb, paste0(f, ".cfg"))
    writeDataTable(wb, paste0(f, ".cfg"), config)
    addWorksheet(wb, paste0(f, ".cs"))
    writeDataTable(wb, paste0(f, ".cs"), cred)
    saveWorkbook(wb, file=xlsx, overwrite=TRUE)
  END
}

function gcta()
{
  if [ -f ${dir}/${pr}.jma.cojo ]; then rm ${dir}/${pr}.jma.cojo ${dir}/${pr}.ldr.cojo; fi
  gcta-1.9 --bfile ${bfile} \
           --cojo-file ${dir}/${p}.ma \
           --extract ${dir}/${pr}.prune.in \
           --cojo-slct \
           --cojo-p 5e-10 \
           --cojo-collinear 0.9 \
           --maf 0.01 \
           --out ${dir}/${pr}

  R -q --no-save <<\ \ END
    options(scipen=20, width=2000)
    d <- Sys.getenv("dir")
    pr <- Sys.getenv("pr")
    jma <- read.delim(paste0(d,"/",pr,".jma.cojo"),as.is=TRUE)
    ldr <- read.delim(paste0(d,"/",pr,".ldr.cojo"), as.is=TRUE)
    tbl <- jma[setdiff(names(jma),c("b","se","p"))]
    load(paste0(pr,".rda"))
    library(gap)
    tbl <- within(tbl, {lp <- log10p(bJ/bJ_se)})
    cred <- cs(tbl, log_p="lp", cutoff=0.95)
    require(openxlsx)
    xlsx <- paste0(pr,"-GCTA.xlsx")
    wb <- createWorkbook(xlsx)
    f <- make.names(pr)
    addWorksheet(wb, paste0(f, ".jma"))
    writeDataTable(wb, paste0(f, ".jma"), merge(snpid_rsid,jma,by.x="rsid",by.y="SNP"))
    addWorksheet(wb, paste0(f, ".ldr"))
    writeDataTable(wb, paste0(f, ".ldr"), merge(snpid_rsid,ldr,by.x="rsid",by.y="SNP"))
    addWorksheet(wb, paste0(f, ".cs"))
    writeDataTable(wb, paste0(f, ".cs"),  merge(snpid_rsid,cred,by.x="rsid",by.y="SNP"))
    saveWorkbook(wb, file=xlsx, overwrite=TRUE)
  END
}

function jam()
{
  cut -d' ' -f1,2 ${sample} | awk 'NR>2' > ${study}.id
  qctool -g ${pr}.bgen -s ${sample} -ofiletype binary_ped -og ${pr}
  R -q --no-save <<\ \ END
    options(scipen=20, width=2000)
    require(rbgen)
    f <- Sys.getenv("pr")
    incl <- scan(paste0(f,".incl"), what="")
    excl <- scan(paste0(f,".excl"), what="")
    s <- Sys.getenv('study')
  # bgen
    samples <- matrix(scan(paste0(s,".id"), what=c("","")),4994,2,byrow=TRUE)
    d <- bgen.load(paste0(f,".bgen"), rsids=setdiff(incl,excl))
    dimnames(d$data)[[2]] <- samples[,1]
  # plink binary_ped files
    library(plink2R)
    bed <- paste0(f,".bed")
    bim <- paste0(f,".bim")
    fam <- paste0(f,".fam")
    p <- read_plink(f)
  # summary statistics
    sumstats <- read.table(paste0(f,".z"), as.is=TRUE, header=TRUE)
    load(paste0(f,".rda"))
    sumstats <- merge(sumstats, snpid_rsid, by="rsid")
  # reference panel with mean substitution for (small) proportion of missing data
    R <- with(p, as.data.frame(2-bed))
  # p <- read.plink(bed,bim,fam)
  # R <- as(with(p,genotypes),"numeric")
    R[] <- lapply(R, function(x) {
      x[is.na(x)] <- mean(x, na.rm = TRUE)
      x
    })
    X.ref <- R
    ss <- subset(sumstats,rsid%in%p$bim$V2)
    beta <- with(ss, beta)
    rsid <- with(ss, name)
    snpid <- with(ss, rsid)
    require(R2BGLiMS)
    ssnpid <- paste0("snp", 1:length(beta))
    names(beta) <- colnames(X.ref) <- ssnpid
    priors <- list("a"=1, "b"=length(beta), "Variables"=ssnpid) # ssnpid
    n <- as.numeric(Sys.getenv("N"))
    j <- JAM(marginal.betas=beta, n=n, X.ref=X.ref, n.mil=5, tau=n, full.mcmc.sampling = FALSE, model.space.priors=priors)
    save(j,file=paste0(f,".j"))
    pst <- slot(j, "posterior.summary.table")
    tm <- TopModels(j)
    ssr <- data.frame(ssnpid=ssnpid, snpid=snpid, rsid=rsid)
    cs <- CredibleSet(j, credible.percentile.threshold=0.75)
    msbf <- ModelSizeBayesFactors(j)[[1]]
    sink(paste0(f, ".jam"))
    pst
    ssr
    cat("\nCredible set\n")
    cs
    cat("\nModel size Bayes Factors\n")
    msbf
    sink()
    n.col <- ncol(tm)
    n.snps <- n.col-1
    post.prob <- tm[,n.col]
    n.sel <- apply(tm[,1:n.snps],1,sum)
    sink(paste0(f,".sum"))
    cbind(n.sel,post.prob)
    sink()
    sink(paste0(f,".cs"))
    cbind(subset(ssr,ssnpid%in%cs),subset(pst,rownames(pst)%in%cs))
    sink()
    if(identical(cs,character(0))) unlink(paste0(f,".cs"))
    tm1 <- tm[1,-n.col]
    selected <- names(tm1[tm1==1])
    if(n.sel[1]>0&n.sel[1]!=n.snps)
    {
       PostProb_model <- rep(post.prob[1],n.sel[1])
       t <- cbind(subset(ssr,ssnpid%in%selected), PostProb_model, subset(pst,rownames(pst)%in%selected))
       write.table(t,paste0(f,".sel"),row.names=FALSE,quote=FALSE)
    }
    require(openxlsx)
    xlsx <- paste0(f,"-JAM.xlsx")
    wb <- createWorkbook(xlsx)
    addWorksheet(wb, "ID")
    writeDataTable(wb, "ID", ssr)
    addWorksheet(wb, "TopModels")
    writeDataTable(wb, "TopModels", as.data.frame(tm))
    addWorksheet(wb, "Model.1")
    PostProb_model <- rep(post.prob[1],n.sel[1])
    writeDataTable(wb, "Model.1", cbind(subset(ssr,ssnpid%in%selected),PostProb_model,subset(pst,rownames(pst)%in%selected)))
    addWorksheet(wb, "CredibleSet")
    writeDataTable(wb, "CredibleSet", cbind(subset(ssr,ssnpid%in%cs),subset(pst,rownames(pst)%in%cs)))
    addWorksheet(wb, "ModelSizeBayesFactors")
    writeDataTable(wb, "ModelSizeBayesFactors", as.data.frame(msbf))
    addWorksheet(wb, "posterior.summary.table")
    writeDataTable(wb, "posterior.summary.table", cbind(ID=rownames(pst), as.data.frame(pst)))
    saveWorkbook(wb, file=xlsx, overwrite=TRUE)
  END
}

finemap
gcta
jam
